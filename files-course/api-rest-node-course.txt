links 
	- https://www.aluiziodeveloper.com.br/criar-aplica%C3%A7%C3%A3o-node-js-com-typescript/
	- https://www.aluiziodeveloper.com.br/eslint/
	- https://www.aluiziodeveloper.com.br/prettier/
	- https://www.aluiziodeveloper.com.br/primeiros-passos-com-docker/
	- https://stackoverflow.com/questions/54235029/dbeaver-can-only-see-default-postgresql-database-in-connection#:~:text=On%20the%20connection%2C%20right%2Dclick,the%20box%20Show%20all%20databases%20.

1) npm init -y

2) packages

- npm install typescript ts-node-dev @types/node tsconfig-paths -D
- npm install eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin -D
- npm install prettier -D
- npm install eslint-config-prettier@6.15.0 eslint-plugin-prettier@3.2.0 -D

3) dependencies

- npm install express cors express-async-erros
- npm install @types/express @types/cors -D

4) migrations

- npm run typeorm migration:create -- --n CreateProducts
- uuid_generated_v4() -> dbeaver - db -> create -> extension -> uuid-ossp
- npm run typeorm migration:run (para rodar os scripts)

5) redis

- docker run --name redis -p 6379:6379 -d -t redis:alpine
- (cli) | docker run --name redis-client -v redisinsight:/db -p 8001:8001 -d -t redislabs/redisinsight:lates (não é utilizado) 
- docker exec -it redis sh
	> redis-cli
	> (criar chave) set teste teste
	> (obter valor) get teste
	
6) build com Babel

- https://github.com/aluiziodeveloper/api-vendas-deploy/blob/main/babel.md

- build 
	renome src to dist and ts to js
	
7) server

- (adiciona algo a um grupo e a um usuário) usermod -aG docker deploy
- (trocar a permissão de uma pasta de um usuário para outro) chown -R deploy:deploy ./ssh
- (liberar portas a acesso público) | sudo ufw allow 80
- (nginx)
	> (sites que estão habilitados) | /etc/nginx/sites-enabled
	> (remova o default e crie um novo)    /etc/nginx/sites-available 
		(https://github.com/aluiziodeveloper/api-vendas-deploy/blob/main/nginx.md)
		=> server {
			  listen 80 default_server;
			  listen [::]:80 default_server;
				server_name apivendas.aluiziodeveloper.cf;

				location / {
					proxy_pass http://localhost:3333;
					proxy_http_version 1.1;
					proxy_set_header Upgrade $http_upgrade;
					proxy_set_header Connection 'upgrade';
					proxy_set_header Host $host;
					proxy_cache_bypass $http_upgrade;
				}
			}
	> (criar um link simbolico para sites enabled) | ln -s /etc/nginx/sites-available/apivendas /etc/nginx/sites-enabled
	> (verificar nginx) | sudo nginx -t
	> (restartar nginx) | sudo service nginx restart

- (docker)
	> (reiniciar o container quando sempre desligar) docker update --restart=unless-stopped postgresql
	
- (pm2)
	> pm2 start dist/shared/http/server.ts --name nome-aplicação
	> pm2 monit
	> (reinicar as aplicações sempre que for desligado - execute o script que ele mandar) pm2 startup systemd
	> (remover o reiniciamento) pm2 unstartup systemd
	> (reiniciar alterações) pm2 save
	
8) jest
- npm -D jest ts-jest @types/jest
- npx jest --init 
	> 1) Y
	> 2) Y
	> 3) node
	> 4) N
	> 5) v8
	> 6) Y
- (jest.config.ts)
	> present: 'ts-jest'
	> testMatch
	
	
9) typeorm 0.3
- (run) npm run typeorm -- -d src/shared/infra/typeorm/index.ts migration:run
- (create) npm run typeorm migration:create src/shared/infra/typeorm/migrations/CreateTestTable
  
  
